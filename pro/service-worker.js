// ‚úÖ Evento 'install': Se dispara cuando el Service Worker se instala por primera vez
self.addEventListener('install', e => {
  // üîÑ Espera a que el contenido se agregue al cach√© antes de completar la instalaci√≥n
  e.waitUntil(
    // üì¶ Abre (o crea si no existe) un cach√© llamado 'pwacache'
    caches.open('pwacache').then(cache => {
      // üìÅ Agrega todos los archivos necesarios para trabajar sin conexi√≥n (offline)
      return cache.addAll([
        'index.html',      // üìÑ Archivo principal HTML
        'style.css',       // üé® Hoja de estilos
        'app.js',          // ‚öôÔ∏è L√≥gica de la aplicaci√≥n
        'manifest.json',   // üìú Manifiesto de la PWA (√≠conos, nombre, etc.)
        'icon-256.png',    // üñºÔ∏è √çcono de tama√±o 256x256
        'icon-512.png'     // üñºÔ∏è √çcono de tama√±o 512x512
      ]);
    })
  );
});

// ‚úÖ Evento 'fetch': Se activa cada vez que la app hace una solicitud (por ejemplo, al cargar im√°genes, HTML, JS, etc.)
self.addEventListener('fetch', e => {
  // üîÅ Intenta responder primero con los archivos del cach√©
  // üß≠ Si no encuentra nada en cach√©, realiza la solicitud normal a internet
  e.respondWith(
    caches.match(e.request).then(response => {
      return response || fetch(e.request); // Devuelve la respuesta en cach√© o hace la petici√≥n online
    })
  );
});
